# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class JobMetadata(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, prerequisites: List[str]=None, postrequisites: List[str]=None, output: List[str]=None):  # noqa: E501
        """JobMetadata - a model defined in Swagger

        :param prerequisites: The prerequisites of this JobMetadata.  # noqa: E501
        :type prerequisites: List[str]
        :param postrequisites: The postrequisites of this JobMetadata.  # noqa: E501
        :type postrequisites: List[str]
        :param output: The output of this JobMetadata.  # noqa: E501
        :type output: List[str]
        """
        self.swagger_types = {
            'prerequisites': List[str],
            'postrequisites': List[str],
            'output': List[str]
        }

        self.attribute_map = {
            'prerequisites': 'prerequisites',
            'postrequisites': 'postrequisites',
            'output': 'output'
        }
        self._prerequisites = prerequisites
        self._postrequisites = postrequisites
        self._output = output

    @classmethod
    def from_dict(cls, dikt) -> 'JobMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The JobMetadata of this JobMetadata.  # noqa: E501
        :rtype: JobMetadata
        """
        return util.deserialize_model(dikt, cls)

    @property
    def prerequisites(self) -> List[str]:
        """Gets the prerequisites of this JobMetadata.


        :return: The prerequisites of this JobMetadata.
        :rtype: List[str]
        """
        return self._prerequisites

    @prerequisites.setter
    def prerequisites(self, prerequisites: List[str]):
        """Sets the prerequisites of this JobMetadata.


        :param prerequisites: The prerequisites of this JobMetadata.
        :type prerequisites: List[str]
        """
        if prerequisites is None:
            raise ValueError("Invalid value for `prerequisites`, must not be `None`")  # noqa: E501

        self._prerequisites = prerequisites

    @property
    def postrequisites(self) -> List[str]:
        """Gets the postrequisites of this JobMetadata.


        :return: The postrequisites of this JobMetadata.
        :rtype: List[str]
        """
        return self._postrequisites

    @postrequisites.setter
    def postrequisites(self, postrequisites: List[str]):
        """Sets the postrequisites of this JobMetadata.


        :param postrequisites: The postrequisites of this JobMetadata.
        :type postrequisites: List[str]
        """
        if postrequisites is None:
            raise ValueError("Invalid value for `postrequisites`, must not be `None`")  # noqa: E501

        self._postrequisites = postrequisites

    @property
    def output(self) -> List[str]:
        """Gets the output of this JobMetadata.


        :return: The output of this JobMetadata.
        :rtype: List[str]
        """
        return self._output

    @output.setter
    def output(self, output: List[str]):
        """Sets the output of this JobMetadata.


        :param output: The output of this JobMetadata.
        :type output: List[str]
        """
        if output is None:
            raise ValueError("Invalid value for `output`, must not be `None`")  # noqa: E501

        self._output = output
