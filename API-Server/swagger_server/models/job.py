# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.commands import Commands  # noqa: F401,E501
from swagger_server.models.job_metadata import JobMetadata  # noqa: F401,E501
from swagger_server import util


class Job(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, job_id: int=None, hpc_job_id: int=None, operation: str=None, user_id: int=None, name: str=None, commands: Commands=None, job_meta_data: JobMetadata=None, created: datetime=None, updated: datetime=None, result: str=None, log: str=None, status: str=None):  # noqa: E501
        """Job - a model defined in Swagger

        :param job_id: The job_id of this Job.  # noqa: E501
        :type job_id: int
        :param hpc_job_id: The hpc_job_id of this Job.  # noqa: E501
        :type hpc_job_id: int
        :param operation: The operation of this Job.  # noqa: E501
        :type operation: str
        :param user_id: The user_id of this Job.  # noqa: E501
        :type user_id: int
        :param name: The name of this Job.  # noqa: E501
        :type name: str
        :param commands: The commands of this Job.  # noqa: E501
        :type commands: Commands
        :param job_meta_data: The job_meta_data of this Job.  # noqa: E501
        :type job_meta_data: JobMetadata
        :param created: The created of this Job.  # noqa: E501
        :type created: datetime
        :param updated: The updated of this Job.  # noqa: E501
        :type updated: datetime
        :param result: The result of this Job.  # noqa: E501
        :type result: str
        :param log: The log of this Job.  # noqa: E501
        :type log: str
        :param status: The status of this Job.  # noqa: E501
        :type status: str
        """
        self.swagger_types = {
            'job_id': int,
            'hpc_job_id': int,
            'operation': str,
            'user_id': int,
            'name': str,
            'commands': Commands,
            'job_meta_data': JobMetadata,
            'created': datetime,
            'updated': datetime,
            'result': str,
            'log': str,
            'status': str
        }

        self.attribute_map = {
            'job_id': 'jobId',
            'hpc_job_id': 'hpcJobId',
            'operation': 'operation',
            'user_id': 'userId',
            'name': 'name',
            'commands': 'commands',
            'job_meta_data': 'jobMetaData',
            'created': 'created',
            'updated': 'updated',
            'result': 'result',
            'log': 'log',
            'status': 'status'
        }
        self._job_id = job_id
        self._hpc_job_id = hpc_job_id
        self._operation = operation
        self._user_id = user_id
        self._name = name
        self._commands = commands
        self._job_meta_data = job_meta_data
        self._created = created
        self._updated = updated
        self._result = result
        self._log = log
        self._status = status

    @classmethod
    def from_dict(cls, dikt) -> 'Job':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Job of this Job.  # noqa: E501
        :rtype: Job
        """
        return util.deserialize_model(dikt, cls)

    def update_job_status(self, old_status, new_status):
        ret = False
        
        if old_status==new_status:
            ret = True

        if old_status=='new' and new_status=='cronjob_in_progress':
            ret = True

        if old_status=='cronjob_in_progress' and new_status=='hpc_queued':
            ret = True

        if old_status=='cronjob_in_progress' and new_status=='cronjob_failed':
            ret = True

        if old_status=='hpc_queued' and new_status=='hpc_in_progress':
            ret = True

        if old_status=='hpc_queued' and new_status=='hpc_aborted':
            ret = True

        if old_status=='hpc_queued' and new_status=='hpc_failed':
            ret = True

        if old_status=='hpc_in_progress' and new_status=='hpc_failed':
            ret = True

        if old_status=='hpc_in_progress' and new_status=='completed':
            ret = True

        return ret

    def get_job(self, job_id, user_id):
        sql = "SELECT * FROM `job` WHERE user_id=" + str(user_id) + " AND job_id=" + str(job_id)
        return self.select(sql)

    def insert_job(self, body):
        sql = "INSERT into `job`"
        sql = sql + " (`hpc_job_id`, `operation`, `user_id`, `name`, `commands`, `job_meta_data`, `created`, `updated`, `result`, `log`, `status`) VALUES"
        sql = sql + " (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s);"
        val = (
            str(body['hpcJobId']),
            str(body['operation']),
            str(body['userId']),
            str(body['name']),
            str(body['commands']),
            str(body['jobMetaData']),
            str(body['created']),
            str(body['updated']),
            str(body['result']),
            str(body['log']),
            str(body['status'])
        )
        return self.insert(sql, val)

    def update_job_operation(self, job_id, operation):
        sql = "UPDATE `job` SET"
        sql = sql + " operation=%s"
        sql = sql + " WHERE job_id=%s;"
        val = (
            str(operation),
            str(job_id)
        )
        return self.update(sql, val)

    def update_job(self, job_id, body):
        sql = "UPDATE `job` SET"
        sql = sql + " hpc_job_id=%s, operation=%s, user_id=%s, name=%s, commands=%s, job_meta_data=%s,"
        sql = sql + " created=%s, updated=%s, result=%s, log=%s, status=%s"
        sql = sql + " WHERE job_id=%s;"
        val = (
            str(body['hpcJobId']),
            str(body['operation']),
            str(body['userId']),
            str(body['name']),
            str(body['commands']),
            str(body['jobMetaData']),
            str(body['created']),
            str(body['updated']),
            str(body['result']),
            str(body['log']),
            str(body['status']),
            str(job_id)
        )
        return self.update(sql, val)

    def get_jobs_cout(self, status, user_id):
        if status != None:
            length = len(status)
            for i in range(length): 
                status[i] = "'" + status[i] + "'"
            status = ','.join(status)

        sql = "SELECT count(*) as t FROM `job` WHERE user_id=" + str(user_id)
        if status != None:
            sql = sql + " AND `status` in (" + status + ");"
        
        return self.select(sql)

    def get_jobs(self, job_status, page_number, page_length, user_id):
        '''
        if job_status != None:
            length = len(job_status)
            for i in range(length): 
                job_status[i] = "'" + job_status[i] + "'"
            job_status = ','.join(job_status)
        '''
        job_status = ','.join(job_status)
        sql = "SELECT * FROM `job` WHERE user_id=" + str(user_id)
        if job_status != None:
            sql = sql + " AND `status` in (" + job_status + ")"
        sql = sql + " ORDER BY `created` ASC LIMIT " + str((page_number-1)*page_length) + ", " + str(page_length)

        return self.select(sql)

    def operate_job_status(self, status, operation):
        ret = False
        
        if operation == 'queue':
            ret = True
        else:
            if status=='hpc_queued' or status=='hpc_in_progress':
                ret = True

        return ret

    def delete_job_status(self, status):
        ret = False
        
        if status=='new' or status=='cronjob_in_progress' or status=='hpc_queued':
            ret = True

        return ret

    def delete_job(self, job_id):
        sql = "DELETE FROM `job` WHERE job_id=" + str(job_id) + ";"
        val = ()
        return self.delete(sql, val)

    @property
    def job_id(self) -> int:
        """Gets the job_id of this Job.


        :return: The job_id of this Job.
        :rtype: int
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id: int):
        """Sets the job_id of this Job.


        :param job_id: The job_id of this Job.
        :type job_id: int
        """

        self._job_id = job_id

    @property
    def hpc_job_id(self) -> int:
        """Gets the hpc_job_id of this Job.


        :return: The hpc_job_id of this Job.
        :rtype: int
        """
        return self._hpc_job_id

    @hpc_job_id.setter
    def hpc_job_id(self, hpc_job_id: int):
        """Sets the hpc_job_id of this Job.


        :param hpc_job_id: The hpc_job_id of this Job.
        :type hpc_job_id: int
        """

        self._hpc_job_id = hpc_job_id

    @property
    def operation(self) -> str:
        """Gets the operation of this Job.

        Job Operation  # noqa: E501

        :return: The operation of this Job.
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation: str):
        """Sets the operation of this Job.

        Job Operation  # noqa: E501

        :param operation: The operation of this Job.
        :type operation: str
        """
        allowed_values = ["queue", "abort"]  # noqa: E501
        if operation not in allowed_values:
            raise ValueError(
                "Invalid value for `operation` ({0}), must be one of {1}"
                .format(operation, allowed_values)
            )

        self._operation = operation

    @property
    def user_id(self) -> int:
        """Gets the user_id of this Job.

        User Id or GWDG account number  # noqa: E501

        :return: The user_id of this Job.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: int):
        """Sets the user_id of this Job.

        User Id or GWDG account number  # noqa: E501

        :param user_id: The user_id of this Job.
        :type user_id: int
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def name(self) -> str:
        """Gets the name of this Job.


        :return: The name of this Job.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Job.


        :param name: The name of this Job.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def commands(self) -> Commands:
        """Gets the commands of this Job.


        :return: The commands of this Job.
        :rtype: Commands
        """
        return self._commands

    @commands.setter
    def commands(self, commands: Commands):
        """Sets the commands of this Job.


        :param commands: The commands of this Job.
        :type commands: Commands
        """
        if commands is None:
            raise ValueError("Invalid value for `commands`, must not be `None`")  # noqa: E501

        self._commands = commands

    @property
    def job_meta_data(self) -> JobMetadata:
        """Gets the job_meta_data of this Job.


        :return: The job_meta_data of this Job.
        :rtype: JobMetadata
        """
        return self._job_meta_data

    @job_meta_data.setter
    def job_meta_data(self, job_meta_data: JobMetadata):
        """Sets the job_meta_data of this Job.


        :param job_meta_data: The job_meta_data of this Job.
        :type job_meta_data: JobMetadata
        """

        self._job_meta_data = job_meta_data

    @property
    def created(self) -> datetime:
        """Gets the created of this Job.


        :return: The created of this Job.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created: datetime):
        """Sets the created of this Job.


        :param created: The created of this Job.
        :type created: datetime
        """

        self._created = created

    @property
    def updated(self) -> datetime:
        """Gets the updated of this Job.


        :return: The updated of this Job.
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated: datetime):
        """Sets the updated of this Job.


        :param updated: The updated of this Job.
        :type updated: datetime
        """

        self._updated = updated

    @property
    def result(self) -> str:
        """Gets the result of this Job.


        :return: The result of this Job.
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result: str):
        """Sets the result of this Job.


        :param result: The result of this Job.
        :type result: str
        """

        self._result = result

    @property
    def log(self) -> str:
        """Gets the log of this Job.


        :return: The log of this Job.
        :rtype: str
        """
        return self._log

    @log.setter
    def log(self, log: str):
        """Sets the log of this Job.


        :param log: The log of this Job.
        :type log: str
        """

        self._log = log

    @property
    def status(self) -> str:
        """Gets the status of this Job.

        Job Status  # noqa: E501

        :return: The status of this Job.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this Job.

        Job Status  # noqa: E501

        :param status: The status of this Job.
        :type status: str
        """
        allowed_values = ["new", "cronjob_in_progress", "hpc_queued", "hpc_in_progress", "cronjob_failed", "hpc_failed", "hpc_aborted", "completed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
